server:
  port: ${SERVER_PORT:8085}

spring:
  application:
    name: exchange-generator

  kafka:
    producer:
      bootstrap-servers: ${SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  security:
    oauth2:
      client:
        provider:
          keycloak:
            token-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URL:http://localhost:8480/realms/bank/protocol/openid-connect/token}
            issuer-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URL:http://localhost:8480/realms/bank}
        registration:
          exchange-generator-client:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_EXCHANGE_GENERATOR_CLIENT_ID}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION__EXCHANGE_GENERATOR_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope: openid
            provider: keycloak

management:
  tracing:
    sampling:
      probability: 1.0

  zipkin:
    tracing:
      endpoint: ${MANAGEMENT_ZIPKIN_TRACING_ENDPOINT:http://localhost:9411/api/v2/spans}

  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus

  metrics:
    export:
      prometheus:
        enabled: true

api:
  exchange: ${API_EXCHANGE:http://localhost:8080/api/exchange"}