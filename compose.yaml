services:
  postgres:
    image: postgres:16
    container_name: postgres_practicum_bank
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data

  keycloak:
    image: keycloak/keycloak:26.2.4
    container_name: keycloak_practicum_bank
    env_file:
      - .env
    ports:
      - "8480:8080"
      - "8454:5005"
    volumes:
      - keycloak_data:/opt/keycloak/data/import
      - ./keycloak-themes:/opt/keycloak/themes
    command:
      - start-dev
    depends_on:
      - postgres

  zipkin:
    image: openzipkin/zipkin:3.5
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/docker-prometheus.yml:/etc/prometheus/prometheus.yml:ro

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - grafana_storage:/var/lib/grafana
    depends_on:
      - prometheus

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka_practicum_bank
    ports:
      - "9092:9092"   # внешний доступ (localhost)
      - "9093:9093"   # внутренний доступ (Logstash и т.д.)
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9094

      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:9093,CONTROLLER://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9093

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      CLUSTER_ID: 4VpqWRbeQmqU9S1YxpZ4SQ
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - elk

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elk

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.0
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.0
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    depends_on:
      - elasticsearch
    networks:
      - elk

  account:
    env_file:
      - services/account/.env
    build:
      context: .
      dockerfile: services/account/Dockerfile
    container_name: account_practicum_bank
    ports:
      - "8082:8082"
    depends_on:
      - postgres

  blocker:
    env_file:
      - services/blocker/.env
    build:
      context: .
      dockerfile: services/blocker/Dockerfile
    container_name: blocker_practicum_bank
    ports:
      - "8087:8087"
    depends_on:
      - postgres

  cash:
    env_file:
      - services/cash/.env
    build:
      context: .
      dockerfile: services/cash/Dockerfile
    container_name: cash_practicum_bank
    ports:
      - "8083:8083"
    depends_on:
      - postgres

  exchange:
    env_file:
      - services/exchange/.env
    build:
      context: .
      dockerfile: services/exchange/Dockerfile
    container_name: exchange_practicum_bank
    ports:
      - "8084:8084"
    depends_on:
      - postgres

  exchange_generator:
    env_file:
      - services/exchange-generator/.env
    build:
      context: .
      dockerfile: services/exchange-generator/Dockerfile
    container_name: exchange_generator_practicum_bank
    ports:
      - "8085:8085"
    depends_on:
      - postgres

  front_ui:
    env_file:
      - services/front-ui/.env
    build:
      context: .
      dockerfile: services/front-ui/Dockerfile
    container_name: front_ui_practicum_bank
    ports:
      - "8081:8081"
    depends_on:
      - postgres

  notification:
    env_file:
      - services/notification/.env
    build:
      context: .
      dockerfile: services/notification/Dockerfile
    container_name: notification_practicum_bank
    ports:
      - "8088:8088"
    depends_on:
      - postgres

  transfer:
    env_file:
      - services/transfer/.env
    build:
      context: .
      dockerfile: services/transfer/Dockerfile
    container_name: transfer_practicum_bank
    ports:
      - "8086:8086"
    depends_on:
      - postgres

volumes:
  postgres_data:
  keycloak_data:
  kafka_data:
  grafana_storage:

networks:
  elk:
    driver: bridge